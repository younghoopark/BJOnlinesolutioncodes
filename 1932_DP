#include <iostream>
#include <algorithm>


using namespace std;

int n;
int val[125251] = { 0, };
int X[125251] = { 0, };

void find_max()
{
	for (int i = 3; i <= n; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			if (j == 1)
			{
				X[(i - 1)*i / 2 + j] = X[(i - 2)*(i - 1) / 2 + j] + val[(i - 1)*i / 2 + j];
			}
			else if (j == i)
			{
				X[(i - 1)*i / 2 + j] = X[(i - 2)*(i - 1) / 2 + j - 1] + val[(i - 1)*i / 2 + j];
			}
			else     //(1 < j < i)
			{
				X[(i - 1)*i / 2 + j] = max(X[(i - 2)*(i - 1) / 2 + j - 1], X[(i - 2)*(i - 1) / 2 + j]) + val[(i - 1)*i / 2 + j];
			}
		}
	}
	/*for (int i = (n - 1)*n / 2 + 1; i <= (n)*(n + 1) / 2; i++)
	{

	}
	*/
	//sort(X + (n - 1)*n / 2 + 1, X + n*(n + 1) / 2 + 1);
	//cout << X[n*(n + 1) / 2] << endl;
	cout << *max_element(X + (n - 1)*n / 2 + 1, X + n * (n + 1) / 2 + 1) << endl;
}
int main()
{
	cin >> n;

	for (int i = 1; i <= n*(n+1)/2; i++)
	{
		cin >> val[i];
	}
	X[1] = val[1];
	X[2] = val[1] + val[2];
	X[3] = val[1] + val[3];

	find_max();

	return 0;
}
