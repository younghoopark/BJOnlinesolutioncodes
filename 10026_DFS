#include <stdio.h>
#include <string.h>

int N;
char map[100][100] = { 0, };
char visited[100][100] = { 0, };
int udlr[4][2] = { {-1,0}, {1,0}, {0,-1}, {0,1} };
int cnt_1 = 0;
int cnt_2 = 0;

int is_in_the_map(int row, int col)
{
	if (row < 0 || row >= N || col < 0 || col >= N)
	{
		return 0;
	}
	return 1;
}

void dfs(int row, int col)
{
	visited[row][col] = 1;
	int i;
	int updaterow = 0;
	int updatecol = 0;
	for (i = 0; i < 4; i++)
	{
		updaterow = row + udlr[i][0];
		updatecol = col + udlr[i][1];
		if (is_in_the_map(updaterow, updatecol) == 1 && (map[row][col] == map[updaterow][updatecol]) && visited[updaterow][updatecol] == 0)
		{
			dfs(updaterow, updatecol);
		}
	}
	
		
}

void notsaekyak(int flag)
{
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			if (visited[i][j] == 0)
			{
				dfs(i, j);
				if (flag == 1) cnt_1++;
				else if (flag == 2) cnt_2++;
			}
		}
	}
}

void saekyak()
{
	int i, j;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < N; j++)
		{
			if (map[i][j] == 'G')
			{
				map[i][j] = 'R';
			}
		}
	}
	notsaekyak(2);
}


int main()
{
	scanf("%d", &N);

	int i, j;
	for (i = 0; i < N; i++)
	{
		getchar();
		for (j = 0; j < N; j++)
		{
			scanf("%1c", &map[i][j]);
		}
	}
	notsaekyak(1);
	memset(visited, 0, sizeof(visited));
	
	saekyak();
	printf("%d %d\n", cnt_1, cnt_2);

	return 0;
}
