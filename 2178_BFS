#include <iostream>
#include <queue>
using namespace std;

struct vertex {
	int r, c;
	int level;
};
int MAP[101][101] = { 0, }, visited[101][101] = { 0, };
int N, M, ans;
int udlr[4][2] = { {0,-1},{0,1},{-1,0},{1,0} };
queue<vertex> q;
int main()
{
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			scanf("%1d", &MAP[i][j]);
		}
	}
	
	vertex v, tmp;
	v.r = 1, v.c = 1, v.level = 1;
	visited[1][1] = 1;
	int newr, newc, newlevel;
	q.push(v);
	while (!q.empty()) {
		v = q.front();
		q.pop();
		if (v.r == N && v.c == M) {
			ans = v.level; break;
		}
		for (int i = 0; i < 4; i++) {
			newr = v.r + udlr[i][0];
			newc = v.c + udlr[i][1];
			newlevel = v.level + 1;
			if (newr < 1 || newr > N || newc < 1 || newc > M) {
				continue;
			}
			if (MAP[newr][newc] == 1 && visited[newr][newc] == 0) {
				visited[newr][newc] = 1;
				tmp.r = newr, tmp.c = newc, tmp.level = newlevel;
				q.push(tmp);
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
