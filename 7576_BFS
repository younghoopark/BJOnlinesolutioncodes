#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

struct tomato {
	int r, c, level;
};
int n, m, ans = 0, map[1001][1001];		//m : col    n : row
int udlr[4][2] = { {-1,0}, {1,0}, {0,-1}, {0,1} };
bool visited[1001][1001];
queue<tomato> q;

int main()
{
	cin >> m >> n;
	tomato tmp;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
			if (map[i][j] == 1) {
				tmp.r = i, tmp.c = j; tmp.level = 0;
				visited[i][j] = true;
				q.push(tmp);
			}
		}
	}

	while (!q.empty()) {
		int popr = q.front().r;
		int popc = q.front().c;
		int poplevel = q.front().level;
		q.pop();
		if (poplevel > ans) {
			ans = poplevel;
		}
		for (int i = 0; i < 4; i++) {
			int newr = popr + udlr[i][0];
			int newc = popc + udlr[i][1];
			if (newr < 0 || newr >= n || newc < 0 || newc >= m) {
				continue;
			}
			if (!visited[newr][newc] && map[newr][newc] == 0) {
				visited[newr][newc] = true;
				map[newr][newc] = 1;			//map updqte되는 부분
				tmp.r = newr, tmp.c = newc, tmp.level = poplevel + 1;
				q.push(tmp);
			}
		}			
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (map[i][j] == 0) {
				ans = -1;
			}
		}
	}
	cout << ans << endl;
	return 0;
}
