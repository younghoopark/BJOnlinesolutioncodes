#include <iostream>
#include <queue>
using namespace std;

int S, depth;
queue <pair<pair<int, int>, int> >q;	//(화면에S개수, 클립보드에S개수), 깊이
bool visited[2002][2002];

void bfs(int depth)
{
	while (!q.empty())
	{
		int popf = q.front().first.first, pops = q.front().first.second, popt = q.front().second;
		q.pop();
		if (popf == S)
		{
		//	printf("정답일 때, 화면개수 : %d, 클립보드에 개수 : %d, 깊이 : %d\n", popf, pops, popt);
			cout << popt << endl; break;
		}
		for (int i = 0; i < 3; i++)
		{
			if (i == 0)			//연산1	화면에있는 이모티콘을 모두 복사해서 클립보드에 저장
			{
				q.push(make_pair(make_pair(popf, popf), popt + 1)); visited[popf][popf] = true;
			}
			else if (i == 1 && pops >= 1 && popf + pops >= 0 && popf + pops <= 2001 && !visited[popf+pops][pops])	//연산2 클립보드에 있는 모든 이모티콘을 화면에 붙여넣기
			{
				q.push(make_pair(make_pair(popf + pops, pops), popt + 1)); visited[popf + pops][pops] = true;
				if (popf + pops == S)
				{
					cout << popt + 1 << endl; return;
				}
			}
			else if (i == 2 && popf-1 >= 1 && !visited[popf-1][pops])	//연산3 화면에 있는 이모티콘중 하나를 삭제
			{
				q.push(make_pair(make_pair(popf - 1, pops), popt + 1)); visited[popf - 1][pops] = true;
				if (popf - 1 == S)
				{
					cout << popt + 1 << endl; return;
				}
			}
		}
	}
}

int main()
{
	cin >> S;
	q.push(make_pair(make_pair(1, 0), 0));
	visited[1][0] = true;
	bfs(0);

	return 0;
}
