#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int N, M, arr[8]; bool visited[8]; bool check[10001];
vector<int> v;
vector<vector<int> > vv;
void printset()
{
	for (int i = 0; i < vv.size(); i++)
	{
		for (int j = 0; j < vv[i].size(); j++)
		{
			cout << vv[i][j] << ' ';
		}
		cout << '\n';
	}
}
void dfs(int idx, int len)
{
	int i;
	if (len == M)
	{
		vv.push_back(v);
		return;
	}

	for (i = 0; i < N; i++)
	{
		if (!visited[i])
		{
			v.push_back(arr[i]);
			visited[i] = true;
			dfs(i + 1, len + 1);
			visited[i] = false; v.pop_back();
		}
	}
}
int main()
{
	cin >> N >> M;
	for (int i = 0; i < N; i++) cin >> arr[i];
	dfs(0, 0);
	sort(vv.begin(), vv.end());
	vv.erase(unique(vv.begin(), vv.end()), vv.end());
	printset();

	return 0;
}
