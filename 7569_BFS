#include <iostream>
#include <queue>

using namespace std;

struct FORQUEUE {
	int h, r, c;
	int day;
};
int map[100][100][100];
int dir[6][3] = { {-1,0,0}, {1,0,0}, {0,-1,0}, {0,1,0}, {0,0,-1}, {0,0,1} }; //앞에서 부터 순서대로, 위(층사이), 아래(층사이), 위(같은층), 아래(같은층), 왼, 오른
queue<FORQUEUE> q;
int main()
{
	int m, n, h; //m:column, n:row
	FORQUEUE qtmp;
	scanf("%d %d %d", &m, &n, &h);		//m:column, n:row, h:height
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < m; k++) {
				scanf("%d", &map[i][j][k]);
				if (map[i][j][k] == 1) {
					qtmp.h = i, qtmp.r = j, qtmp.c = k, qtmp.day = 0;
					q.push(qtmp);
				}
			}
		}
	}
	int ans = 0;
	while (!q.empty()) {
		int poph = q.front().h;
		int popr = q.front().r;
		int popc = q.front().c;
		int popday = q.front().day;
		if (popday > ans) {
			ans = popday;
		}
		q.pop();
		for (int i = 0; i < 6; i++) {
			int newh = poph + dir[i][0];
			int newr = popr + dir[i][1];
			int newc = popc + dir[i][2];
			int newday = popday + 1;
			if (newh < 0 || newh >= h || newr < 0 || newr >= n || newc < 0 || newc >= m) {
				continue;
			}
			if (map[newh][newr][newc] == 0) {
				map[newh][newr][newc] = 1;
				qtmp.h = newh, qtmp.r = newr, qtmp.c = newc, qtmp.day = newday;
				q.push(qtmp);
			}
		}
	}
	int flag = 0;
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < m; k++) {
				if (map[i][j][k] == 0) {
					ans = -1; break;
				}
			}
		}
	}
	printf("%d\n", ans);
	
	return 0;
}
